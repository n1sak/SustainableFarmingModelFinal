# -*- coding: utf-8 -*-
"""Our Model vs Random Chance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vKGnRsHLzQwrPGU5dQT_cimrJRkAhJNg
"""

#@title ###Setup notebook.
#@title ###Setup notebook.
!gdown --id 1DgOZ56YruuUmHRD7hZNJNM39mlbRGApp # sample metadata
!gdown --id 1R4Nv1SY4zn_Z3wnZuJcCHKI6yVPGGgGZ # bacteria counts lognorm


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score, mean_absolute_error

metadata = pd.read_table('sample_metadata.tsv')
metadata.index = ['farm_%i' % i for i in range(len(metadata))]

bacteria_counts_lognorm = pd.read_csv('bacteria_counts_lognorm.csv', index_col=0)

"""# Experimenting with Different Models


"""

#@title Decision Tree Regressor Performance

X = bacteria_counts_lognorm
y = metadata['crop_yield']


X_train_dtr, X_test_dtr, y_train_dtr, y_test_dtr = train_test_split(X, y)

decision_tree_regressor = DecisionTreeRegressor(max_depth=100, max_leaf_nodes=200)

decision_tree_regressor.fit(X_train_dtr, y_train_dtr)


preds_dtr = decision_tree_regressor.predict(X_test_dtr)


plt.plot(y_test_dtr, preds_dtr, '.')
plt.xlabel('True crop yields')
plt.ylabel('Predicted crop yields')
plt.show()

"""# Experimenting with Different Models

Testing which model works the best for predicting crop yield from bacterial soil composition.


"""

X = bacteria_counts_lognorm
y = metadata['crop_yield']


X_train, X_test, y_train, y_test = train_test_split(X, y)


model = DecisionTreeRegressor(max_depth=100, max_leaf_nodes=200)


model.fit(X_train, y_train)


preds = model.predict(X_test)


plt.plot(y_test, preds, '.')
plt.xlabel('True crop yields')
plt.ylabel('Predicted crop yields')
plt.show()

X = bacteria_counts_lognorm
y = metadata['crop_yield']

X_train, X_test, y_train, y_test = train_test_split(X, y)


model = LinearRegression()


model.fit(X_train, y_train)


preds = model.predict(X_test)


plt.plot(y_test, preds, '.')
plt.xlabel('True crop yields')
plt.ylabel('Predicted crop yields')
plt.show()

#@title #### Example Solution
R2 = r2_score(y_test, preds)
print('R2=', R2)

"""### 2. Mean Absolute Error (`MAE`)"""

# Compute MAE using y_test and preds.
MAE = mean_absolute_error(y_test, preds)
print('MAE=', MAE)

"""### 3. Relative Squared Error (RSE)
[function documentation](https://numpy.org/doc/stable/reference/generated/numpy.mean.html)
"""

# Compute RSE using y_test and preds.
def relative_squared_error(true_vals, pred_vals):

  # Compute the total squared error for our predictions.
  total_squared_error = sum((pred_vals-true_vals)**2)

  # Compute the average of true_vals.
  average_of_true_vals = np.mean(true_vals)

  # Compute the total squared error if we were using a simple model.
  total_squared_error_simple_predictor  = sum((average_of_true_vals-true_vals)**2)

  # Return the ratio of total squared errors for our model compared to the simple model.
  return (total_squared_error/total_squared_error_simple_predictor)


RSE = relative_squared_error(y_test, preds)
print('RSE=', RSE)

metadata

crop_yield_test_predictions = model.predict(X_test)

yield_predictions_dataframe = pd.DataFrame(data={'farm':X_test.index, 'crop_yield':crop_yield_test_predictions})
yield_predictions_dataframe.head()

sorted_dataframe = yield_predictions_dataframe.sort_values('crop_yield', ascending=False)

top_farms_dataframe = sorted_dataframe.head(10)
farm_names=top_farms_dataframe['farm']
print("According to our model, the top 10 best plots are:", farm_names.to_list())
top_farms_dataframe

#@title #### Lottery System - Government Currently Using
#subsidies
np.random.seed(60)
crop_yields_10_random_picks = np.random.choice(y_test, 10)
total_crop_yield_using_lottery = sum(crop_yields_10_random_picks)
print("total crop yield using Lottery System in pounds per acre: ", total_crop_yield_using_lottery)

#@title ###My Sustainable Farming Model
# This extracts the true crop yields from the 10 farms the model suggested.
# crop_yields_top_10_predictions is thus an array of crop yields with length 10.
crop_yields_top_10_predictions = top_farms_dataframe['crop_yield']

total_crop_yield_using_model = sum(crop_yields_top_10_predictions)
print("total crop yield using Our Model suggestions: ", total_crop_yield_using_model)

#@title #### Histogram Lottery System vs my Model
plt.hist(total_crop_yield_using_lottery_list)
plt.vlines(total_crop_yield_using_model, ymin=0, ymax=30, color='r', linestyle='dashed')
plt.xlabel('Total crop yield')
plt.ylabel('Frequency')
plt.title('Total Crop Yield if picked randomly')
print('Dotted line represents total crop yield if using model to select farms.')